kind: Template
apiVersion: v1
parameters:
  - name: APP
    required: true
    value: finbif2gbif
  - name: APP_TITLE
    required: true
    value: "FinBIF to GBIF"
  - name: APP_PORT
    required: true
    value: "8000"
  - name: ARCHIVE_DIR
    required: true
    value: /home/user/archives
  - name: STATUS_DIR
    required: true
    value: /home/user/status
  - name: HEALTH
    required: true
    value: /healthz
  - name: LOG
    required: true
    value: log-monitor
  - name: LOG_PORT
    required: true
    value: "3838"
  - name: LOG_DIR
    required: true
    value: /home/user/logs
  - name: ORG
    required: true
    value: luomus
  - name: BRANCH
    required: true
    value: main
  - name: DEV_BRANCH
    required: true
    value: dev
  - name: STORAGE
    required: true
    value: "12Gi"
  - name: REPS
    required: true
    value: "1"
  - name: HOST
    required: true
  - name: ENDPOINTS
    required: true
  - name: FINBIF_ACCESS_TOKEN
    required: true
  - name: FINBIF_API
    required: true
  - name: DEV_FINBIF_ACCESS_TOKEN
    required: true
  - name: DEV_FINBIF_API
    required: true
  - name: GBIF_USER
    required: true
  - name: GBIF_ORG
    required: true
  - name: GBIF_INSTALLATION
    required: true
  - name: GBIF_PASS
    required: true
  - name: GBIF_API
    required: true
  - name: DEV_GBIF_ORG
    required: true
  - name: DEV_GBIF_INSTALLATION
    required: true
  - name: DEV_GBIF_PASS
    required: true
  - name: DEV_GBIF_API
    required: true
  - name: GITHUB_SECRET
    required: true
    generate: expression
    from: "[a-zA-Z0-9]{20}"
metadata:
  name: ${APP}
objects:
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: ${APP}
    labels:
      app: ${APP}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APP}:latest
    source:
      type: Git
      git:
        uri: https://github.com/${ORG}/${APP}.git
        ref: ${BRANCH}
    strategy:
      type: Docker
    triggers:
    - type: ConfigChange
    - type: GitHub
      github:
        secret: ${GITHUB_SECRET}
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: dev-${APP}
    labels:
      app: ${APP}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: dev-${APP}:latest
    source:
      type: Git
      git:
        uri: https://github.com/${ORG}/${APP}.git
        ref: ${DEV_BRANCH}
    strategy:
      type: Docker
    triggers:
    - type: ConfigChange
    - type: GitHub
      github:
        secret: ${GITHUB_SECRET}
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: ${LOG}
    labels:
      app: ${APP}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${LOG}:latest
    source:
      type: Git
      git:
        uri: https://github.com/${ORG}/${LOG}.git
        ref: ${BRANCH}
    strategy:
      type: Docker
    triggers:
    - type: ConfigChange
    - type: GitHub
      github:
        secret: ${GITHUB_SECRET}
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: ${APP}
    labels:
      app: ${APP}
  spec:
    lookupPolicy:
      local: true
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: dev-${APP}
    labels:
      app: ${APP}
  spec:
    lookupPolicy:
      local: true
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: ${LOG}
    labels:
      app: ${APP}
  spec:
    lookupPolicy:
      local: true
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${APP}
    labels:
      app: ${APP}
  spec:
    replicas: ${REPS}
    selector:
      app: ${APP}
      deploymentconfig: ${APP}
    template:
      metadata:
        labels:
          app: ${APP}
          deploymentconfig: ${APP}
      spec:
        containers:
        - image: ${APP}:latest
          name: ${APP}
          ports:
          - containerPort: ${APP_PORT}
          volumeMounts:
          - mountPath: ${LOG_DIR}
            name: ${LOG}
          - mountPath: ${ARCHIVE_DIR}
            name: ${APP}-archive
          - mountPath: ${STATUS_DIR}
            name: ${APP}-status
          livenessProbe:
            httpGet:
              path: ${HEALTH}
              port: ${{APP_PORT}}
            failureThreshold: 5
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: ${HEALTH}
              port: ${{APP_PORT}}
            initialDelaySeconds: 5
            periodSeconds: 5
          env:
          - name: PAGE_TITLE
            value: ${APP_TITLE}
          - name: ENDPOINTS
            value: https://${HOST}/${ENDPOINTS}
          - name: FINBIF_ACCESS_TOKEN
            value: ${FINBIF_ACCESS_TOKEN}
          - name: FINBIF_API
            value: ${FINBIF_API}
          - name: GBIF_USER
            value: ${GBIF_USER}
          - name: GBIF_ORG
            value: ${GBIF_ORG}
          - name: GBIF_INSTALLATION
            value: ${GBIF_INSTALLATION}
          - name: GBIF_PASS
            value: ${GBIF_PASS}
          - name: GBIF_API
            value: ${GBIF_API}
        volumes:
        - name: ${LOG}
          persistentVolumeClaim:
            claimName: ${LOG}
        - name: ${APP}-archive
          persistentVolumeClaim:
            claimName: ${APP}-archive
        - name: ${APP}-status
          persistentVolumeClaim:
            claimName: ${APP}-status
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - ${APP}
        from:
          kind: ImageStreamTag
          name: ${APP}:latest
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: dev-${APP}
    labels:
      app: ${APP}
  spec:
    replicas: ${REPS}
    selector:
      app: ${APP}
      deploymentconfig: dev-${APP}
    template:
      metadata:
        labels:
          app: ${APP}
          deploymentconfig: dev-${APP}
      spec:
        containers:
        - image: dev-${APP}:latest
          name: dev-${APP}
          ports:
          - containerPort: ${APP_PORT}
          volumeMounts:
          - mountPath: ${LOG_DIR}
            name: dev-${LOG}
          - mountPath: ${ARCHIVE_DIR}
            name: dev-${APP}-archive
          - mountPath: ${STATUS_DIR}
            name: dev-${APP}-status
          livenessProbe:
            httpGet:
              path: ${HEALTH}
              port: ${{APP_PORT}}
            failureThreshold: 5
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: ${HEALTH}
              port: ${{APP_PORT}}
            initialDelaySeconds: 5
            periodSeconds: 5
          env:
          - name: PAGE_TITLE
            value: ${APP_TITLE}-dev
          - name: BRANCH
            value: ${DEV_BRANCH}
          - name: ENDPOINTS
            value: https://dev-${HOST}/${ENDPOINTS}
          - name: FINBIF_ACCESS_TOKEN
            value: ${DEV_FINBIF_ACCESS_TOKEN}
          - name: FINBIF_API
            value: ${DEV_FINBIF_API}
          - name: GBIF_USER
            value: ${GBIF_USER}
          - name: GBIF_ORG
            value: ${DEV_GBIF_ORG}
          - name: GBIF_INSTALLATION
            value: ${DEV_GBIF_INSTALLATION}
          - name: GBIF_PASS
            value: ${DEV_GBIF_PASS}
          - name: GBIF_API
            value: ${DEV_GBIF_API}
        volumes:
        - name: dev-${LOG}
          persistentVolumeClaim:
            claimName: dev-${LOG}
        - name: dev-${APP}-archive
          persistentVolumeClaim:
            claimName: dev-${APP}-archive
        - name: dev-${APP}-status
          persistentVolumeClaim:
            claimName: dev-${APP}-status
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - dev-${APP}
        from:
          kind: ImageStreamTag
          name: dev-${APP}:latest
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${LOG}
    labels:
      app: ${APP}
  spec:
    replicas: 1
    selector:
      app: ${APP}
      deploymentconfig: ${LOG}
    template:
      metadata:
        labels:
          app: ${APP}
          deploymentconfig: ${LOG}
      spec:
        containers:
        - image: ${LOG}:latest
          name: ${LOG}
          ports:
          - containerPort: ${LOG_PORT}
          volumeMounts:
          - mountPath: ${LOG_DIR}
            name: ${LOG}
          livenessProbe:
            httpGet:
              port: ${{LOG_PORT}}
            failureThreshold: 5
            periodSeconds: 30
          readinessProbe:
            httpGet:
              port: ${{LOG_PORT}}
            initialDelaySeconds: 5
            periodSeconds: 5
          env:
          - name: PAGE_TITLE
            value: ${APP_TITLE}
        volumes:
        - name: ${LOG}
          persistentVolumeClaim:
            claimName: ${LOG}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - ${LOG}
        from:
          kind: ImageStreamTag
          name: ${LOG}:latest
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: dev-${LOG}
    labels:
      app: ${APP}
  spec:
    replicas: 1
    selector:
      app: ${APP}
      deploymentconfig: dev-${LOG}
    template:
      metadata:
        labels:
          app: ${APP}
          deploymentconfig: dev-${LOG}
      spec:
        containers:
        - image: ${LOG}:latest
          name: dev-${LOG}
          ports:
          - containerPort: ${LOG_PORT}
          volumeMounts:
          - mountPath: ${LOG_DIR}
            name: dev-${LOG}
          livenessProbe:
            httpGet:
              port: ${{LOG_PORT}}
            failureThreshold: 5
            periodSeconds: 30
          readinessProbe:
            httpGet:
              port: ${{LOG_PORT}}
            initialDelaySeconds: 5
            periodSeconds: 5
          env:
          - name: PAGE_TITLE
            value: ${APP_TITLE}-dev
        volumes:
        - name: dev-${LOG}
          persistentVolumeClaim:
            claimName: dev-${LOG}
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - dev-${LOG}
        from:
          kind: ImageStreamTag
          name: ${LOG}:latest
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: ${LOG}
  spec:
    accessModes:
    - ReadWriteMany
    persistentVolumeReclaimPolicy: Retain
    resources:
      requests:
        storage: ${STORAGE}
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: dev-${LOG}
  spec:
    accessModes:
    - ReadWriteMany
    persistentVolumeReclaimPolicy: Retain
    resources:
      requests:
        storage: ${STORAGE}
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: ${APP}-archive
  spec:
    accessModes:
    - ReadWriteMany
    persistentVolumeReclaimPolicy: Retain
    resources:
      requests:
        storage: ${STORAGE}
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: dev-${APP}-archive
  spec:
    accessModes:
    - ReadWriteMany
    persistentVolumeReclaimPolicy: Retain
    resources:
      requests:
        storage: ${STORAGE}
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: ${APP}-status
  spec:
    accessModes:
    - ReadWriteMany
    persistentVolumeReclaimPolicy: Retain
    resources:
      requests:
        storage: "1Gi"
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: dev-${APP}-status
  spec:
    accessModes:
    - ReadWriteMany
    persistentVolumeReclaimPolicy: Retain
    resources:
      requests:
        storage: "1Gi"
- kind: Service
  apiVersion: v1
  metadata:
    name: ${APP}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${APP_PORT}-tcp
      port: ${APP_PORT}
      protocol: TCP
      targetPort: ${{APP_PORT}}
    selector:
      app: ${APP}
      deploymentconfig: ${APP}
- kind: Service
  apiVersion: v1
  metadata:
    name: dev-${APP}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${APP_PORT}-tcp
      port: ${APP_PORT}
      protocol: TCP
      targetPort: ${{APP_PORT}}
    selector:
      app: ${APP}
      deploymentconfig: dev-${APP}
- kind: Service
  apiVersion: v1
  metadata:
    name: ${LOG}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${LOG_PORT}-tcp
      port: ${LOG_PORT}
      protocol: TCP
      targetPort: ${{LOG_PORT}}
    selector:
      app: ${APP}
      deploymentconfig: ${LOG}
- kind: Service
  apiVersion: v1
  metadata:
    name: dev-${LOG}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${LOG_PORT}-tcp
      port: ${LOG_PORT}
      protocol: TCP
      targetPort: ${{LOG_PORT}}
    selector:
      app: ${APP}
      deploymentconfig: dev-${LOG}
- kind: Route
  apiVersion: v1
  metadata:
    name: ${APP}
    labels:
      app: ${APP}
  spec:
    host: ${HOST}
    port:
      targetPort: ${APP_PORT}-tcp
    tls:
      termination: edge
    to:
      kind: Service
      name: ${APP}
      weight: 100
    wildcardPolicy: None
- kind: Route
  apiVersion: v1
  metadata:
    name: dev-${APP}
    labels:
      app: ${APP}
  spec:
    host: dev-${HOST}
    port:
      targetPort: ${APP_PORT}-tcp
    tls:
      termination: edge
    to:
      kind: Service
      name: dev-${APP}
      weight: 100
    wildcardPolicy: None
- kind: Route
  apiVersion: v1
  metadata:
    name: ${LOG}
    labels:
      app: ${APP}
  spec:
    host: log-${HOST}
    port:
      targetPort: ${LOG_PORT}-tcp
    tls:
      termination: edge
    to:
      kind: Service
      name: ${LOG}
      weight: 100
    wildcardPolicy: None
- kind: Route
  apiVersion: v1
  metadata:
    name: dev-${LOG}
    labels:
      app: ${APP}
  spec:
    host: dev-log-${HOST}
    port:
      targetPort: ${LOG_PORT}-tcp
    tls:
      termination: edge
    to:
      kind: Service
      name: dev-${LOG}
      weight: 100
    wildcardPolicy: None
- kind: CronJob
  apiVersion: batch/v1beta1
  metadata:
    name: dev-${APP}
  spec:
    schedule: "0 0 * * *"
    concurrencyPolicy: "Forbid"
    successfulJobsHistoryLimit: 3
    failedJobsHistoryLimit: 3
    jobTemplate:
      spec:
        template:
          metadata:
            labels:
              app: ${APP}
          spec:
            containers:
            - name: dev-${APP}-job
              image: dev-${APP}:latest
              command: ["Rscript",  "finbif2gbif.R"]
              volumeMounts:
              - mountPath: ${ARCHIVE_DIR}
                name: dev-${APP}-archive
              - mountPath: ${STATUS_DIR}
                name: dev-${APP}-status
              env:
              - name: PAGE_TITLE
                value: ${APP_TITLE}-dev
              - name: BRANCH
                value: ${DEV_BRANCH}
              - name: ENDPOINTS
                value: https://dev-${HOST}/${ENDPOINTS}
              - name: FINBIF_ACCESS_TOKEN
                value: ${DEV_FINBIF_ACCESS_TOKEN}
              - name: FINBIF_API
                value: ${DEV_FINBIF_API}
              - name: GBIF_USER
                value: ${GBIF_USER}
              - name: GBIF_ORG
                value: ${DEV_GBIF_ORG}
              - name: GBIF_INSTALLATION
                value: ${DEV_GBIF_INSTALLATION}
              - name: GBIF_PASS
                value: ${DEV_GBIF_PASS}
              - name: GBIF_API
                value: ${DEV_GBIF_API}
            volumes:
            - name: dev-${APP}-archive
              persistentVolumeClaim:
                claimName: dev-${APP}-archive
            - name: dev-${APP}-status
              persistentVolumeClaim:
                claimName: dev-${APP}-status
            restartPolicy: Never
